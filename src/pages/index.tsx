import Head from "next/head";
import Slider from "../components/home/Slider";
import FeaturedProduct from "../components/home/FeaturedProduct";
import Commit from "../components/Commit";
import TopNewArrivals from "../components/home/TopNewArrivels";
import Footer from "../components/Footer";
import { QueryClient, dehydrate, useQuery, useMutation } from "react-query";
import { useLayoutEffect } from "react";
import { useDispatch } from "react-redux";
import { setUser } from "../features/user/userSlice";
import { callCheckAuth } from "../utils/fetch";

const Home = () => {
  const dispatch = useDispatch();
  const featuredProducts = useQuery<Product[]>("getFeaturedProduct", getFeaturedProduct);
  const newProducts = useQuery<Product[]>("getNewProducts", getNewProducts);

  const checkAuth = useMutation(callCheckAuth, {
    onSuccess: (data) => {
      if (!data.success) {
        dispatch(setUser({_id: "", email: "", username: "", password: "", address: ""}));
      }
    }
  })

  useLayoutEffect(() => {
    checkAuth.mutate();
  },[])

  return (
    <>
      <Head>
        <title>laptop ecommerce</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <header>
          <Slider />
        </header>
        <Commit />
        <FeaturedProduct featuredProducts={featuredProducts} />
        <TopNewArrivals newProducts={newProducts} />
      </main>
      <Footer />
    </>
  );
};

function getNewProducts() {
  return fetch("http://localhost:5000/api/products/?new=true")
    .then((res) => res.json())
    .then((data) => data);
}

function getFeaturedProduct() {
  return fetch("http://localhost:5000/api/products/?featured=true")
    .then((res) => res.json())
    .then((data) => data);
}

export async function getServerSideProps() {
  const queryClient = new QueryClient();

  await queryClient.prefetchQuery("getNewProducts", getNewProducts);
  await queryClient.prefetchQuery("getFeaturedProducts", getFeaturedProduct);

  return {
    props: { dehydratedState: dehydrate(queryClient) },
  };
}

export default Home;
